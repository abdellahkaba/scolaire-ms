/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addTeacher } from '../fn/teachers/add-teacher';
import { AddTeacher$Params } from '../fn/teachers/add-teacher';
import { assignCourseToTeacher } from '../fn/teachers/assign-course-to-teacher';
import { AssignCourseToTeacher$Params } from '../fn/teachers/assign-course-to-teacher';
import { deleteTeacherById } from '../fn/teachers/delete-teacher-by-id';
import { DeleteTeacherById$Params } from '../fn/teachers/delete-teacher-by-id';
import { getAllTeachers } from '../fn/teachers/get-all-teachers';
import { GetAllTeachers$Params } from '../fn/teachers/get-all-teachers';
import { getTeacherById } from '../fn/teachers/get-teacher-by-id';
import { GetTeacherById$Params } from '../fn/teachers/get-teacher-by-id';
import { listAllTeachers } from '../fn/teachers/list-all-teachers';
import { ListAllTeachers$Params } from '../fn/teachers/list-all-teachers';
import { PageResponseTeacherResponse } from '../models/page-response-teacher-response';
import { TeacherResponse } from '../models/teacher-response';
import { updateTeacher } from '../fn/teachers/update-teacher';
import { UpdateTeacher$Params } from '../fn/teachers/update-teacher';

@Injectable({ providedIn: 'root' })
export class TeachersService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllTeachers()` */
  static readonly GetAllTeachersPath = '/teachers';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllTeachers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllTeachers$Response(params?: GetAllTeachers$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TeacherResponse>>> {
    return getAllTeachers(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllTeachers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllTeachers(params?: GetAllTeachers$Params, context?: HttpContext): Observable<Array<TeacherResponse>> {
    return this.getAllTeachers$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TeacherResponse>>): Array<TeacherResponse> => r.body)
    );
  }

  /** Path part for operation `updateTeacher()` */
  static readonly UpdateTeacherPath = '/teachers';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTeacher()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTeacher$Response(params: UpdateTeacher$Params, context?: HttpContext): Observable<StrictHttpResponse<TeacherResponse>> {
    return updateTeacher(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTeacher$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTeacher(params: UpdateTeacher$Params, context?: HttpContext): Observable<TeacherResponse> {
    return this.updateTeacher$Response(params, context).pipe(
      map((r: StrictHttpResponse<TeacherResponse>): TeacherResponse => r.body)
    );
  }

  /** Path part for operation `addTeacher()` */
  static readonly AddTeacherPath = '/teachers';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addTeacher()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addTeacher$Response(params: AddTeacher$Params, context?: HttpContext): Observable<StrictHttpResponse<TeacherResponse>> {
    return addTeacher(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addTeacher$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addTeacher(params: AddTeacher$Params, context?: HttpContext): Observable<TeacherResponse> {
    return this.addTeacher$Response(params, context).pipe(
      map((r: StrictHttpResponse<TeacherResponse>): TeacherResponse => r.body)
    );
  }

  /** Path part for operation `assignCourseToTeacher()` */
  static readonly AssignCourseToTeacherPath = '/teachers/{teacherId}/assign-course/{courseId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `assignCourseToTeacher()` instead.
   *
   * This method doesn't expect any request body.
   */
  assignCourseToTeacher$Response(params: AssignCourseToTeacher$Params, context?: HttpContext): Observable<StrictHttpResponse<TeacherResponse>> {
    return assignCourseToTeacher(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `assignCourseToTeacher$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  assignCourseToTeacher(params: AssignCourseToTeacher$Params, context?: HttpContext): Observable<TeacherResponse> {
    return this.assignCourseToTeacher$Response(params, context).pipe(
      map((r: StrictHttpResponse<TeacherResponse>): TeacherResponse => r.body)
    );
  }

  /** Path part for operation `getTeacherById()` */
  static readonly GetTeacherByIdPath = '/teachers/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTeacherById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTeacherById$Response(params: GetTeacherById$Params, context?: HttpContext): Observable<StrictHttpResponse<TeacherResponse>> {
    return getTeacherById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTeacherById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTeacherById(params: GetTeacherById$Params, context?: HttpContext): Observable<TeacherResponse> {
    return this.getTeacherById$Response(params, context).pipe(
      map((r: StrictHttpResponse<TeacherResponse>): TeacherResponse => r.body)
    );
  }

  /** Path part for operation `deleteTeacherById()` */
  static readonly DeleteTeacherByIdPath = '/teachers/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteTeacherById()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTeacherById$Response(params: DeleteTeacherById$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteTeacherById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteTeacherById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTeacherById(params: DeleteTeacherById$Params, context?: HttpContext): Observable<void> {
    return this.deleteTeacherById$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `listAllTeachers()` */
  static readonly ListAllTeachersPath = '/teachers/by-page';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listAllTeachers()` instead.
   *
   * This method doesn't expect any request body.
   */
  listAllTeachers$Response(params?: ListAllTeachers$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseTeacherResponse>> {
    return listAllTeachers(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listAllTeachers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listAllTeachers(params?: ListAllTeachers$Params, context?: HttpContext): Observable<PageResponseTeacherResponse> {
    return this.listAllTeachers$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseTeacherResponse>): PageResponseTeacherResponse => r.body)
    );
  }

}
