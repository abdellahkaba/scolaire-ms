/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addAgent } from '../fn/administrative-agent/add-agent';
import { AddAgent$Params } from '../fn/administrative-agent/add-agent';
import { AdministrativeAgentResponse } from '../models/administrative-agent-response';
import { deleteAgent } from '../fn/administrative-agent/delete-agent';
import { DeleteAgent$Params } from '../fn/administrative-agent/delete-agent';
import { getAgent } from '../fn/administrative-agent/get-agent';
import { GetAgent$Params } from '../fn/administrative-agent/get-agent';
import { getAllAgents } from '../fn/administrative-agent/get-all-agents';
import { GetAllAgents$Params } from '../fn/administrative-agent/get-all-agents';
import { listAllAdminAgents } from '../fn/administrative-agent/list-all-admin-agents';
import { ListAllAdminAgents$Params } from '../fn/administrative-agent/list-all-admin-agents';
import { PageResponseAdministrativeAgentResponse } from '../models/page-response-administrative-agent-response';
import { updateAgent } from '../fn/administrative-agent/update-agent';
import { UpdateAgent$Params } from '../fn/administrative-agent/update-agent';

@Injectable({ providedIn: 'root' })
export class AdministrativeAgentService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllAgents()` */
  static readonly GetAllAgentsPath = '/agents';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllAgents()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllAgents$Response(params?: GetAllAgents$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<AdministrativeAgentResponse>>> {
    return getAllAgents(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllAgents$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllAgents(params?: GetAllAgents$Params, context?: HttpContext): Observable<Array<AdministrativeAgentResponse>> {
    return this.getAllAgents$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<AdministrativeAgentResponse>>): Array<AdministrativeAgentResponse> => r.body)
    );
  }

  /** Path part for operation `updateAgent()` */
  static readonly UpdateAgentPath = '/agents';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateAgent()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateAgent$Response(params: UpdateAgent$Params, context?: HttpContext): Observable<StrictHttpResponse<AdministrativeAgentResponse>> {
    return updateAgent(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateAgent$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateAgent(params: UpdateAgent$Params, context?: HttpContext): Observable<AdministrativeAgentResponse> {
    return this.updateAgent$Response(params, context).pipe(
      map((r: StrictHttpResponse<AdministrativeAgentResponse>): AdministrativeAgentResponse => r.body)
    );
  }

  /** Path part for operation `addAgent()` */
  static readonly AddAgentPath = '/agents';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addAgent()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addAgent$Response(params: AddAgent$Params, context?: HttpContext): Observable<StrictHttpResponse<AdministrativeAgentResponse>> {
    return addAgent(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addAgent$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addAgent(params: AddAgent$Params, context?: HttpContext): Observable<AdministrativeAgentResponse> {
    return this.addAgent$Response(params, context).pipe(
      map((r: StrictHttpResponse<AdministrativeAgentResponse>): AdministrativeAgentResponse => r.body)
    );
  }

  /** Path part for operation `getAgent()` */
  static readonly GetAgentPath = '/agents/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAgent()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAgent$Response(params: GetAgent$Params, context?: HttpContext): Observable<StrictHttpResponse<AdministrativeAgentResponse>> {
    return getAgent(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAgent$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAgent(params: GetAgent$Params, context?: HttpContext): Observable<AdministrativeAgentResponse> {
    return this.getAgent$Response(params, context).pipe(
      map((r: StrictHttpResponse<AdministrativeAgentResponse>): AdministrativeAgentResponse => r.body)
    );
  }

  /** Path part for operation `deleteAgent()` */
  static readonly DeleteAgentPath = '/agents/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteAgent()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAgent$Response(params: DeleteAgent$Params, context?: HttpContext): Observable<StrictHttpResponse<AdministrativeAgentResponse>> {
    return deleteAgent(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteAgent$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAgent(params: DeleteAgent$Params, context?: HttpContext): Observable<AdministrativeAgentResponse> {
    return this.deleteAgent$Response(params, context).pipe(
      map((r: StrictHttpResponse<AdministrativeAgentResponse>): AdministrativeAgentResponse => r.body)
    );
  }

  /** Path part for operation `listAllAdminAgents()` */
  static readonly ListAllAdminAgentsPath = '/agents/by-page';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listAllAdminAgents()` instead.
   *
   * This method doesn't expect any request body.
   */
  listAllAdminAgents$Response(params?: ListAllAdminAgents$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseAdministrativeAgentResponse>> {
    return listAllAdminAgents(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listAllAdminAgents$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listAllAdminAgents(params?: ListAllAdminAgents$Params, context?: HttpContext): Observable<PageResponseAdministrativeAgentResponse> {
    return this.listAllAdminAgents$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseAdministrativeAgentResponse>): PageResponseAdministrativeAgentResponse => r.body)
    );
  }

}
