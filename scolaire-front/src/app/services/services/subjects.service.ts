/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addSubject } from '../fn/subjects/add-subject';
import { AddSubject$Params } from '../fn/subjects/add-subject';
import { deleteSubjectById } from '../fn/subjects/delete-subject-by-id';
import { DeleteSubjectById$Params } from '../fn/subjects/delete-subject-by-id';
import { getAllSubjects } from '../fn/subjects/get-all-subjects';
import { GetAllSubjects$Params } from '../fn/subjects/get-all-subjects';
import { getSubjectById } from '../fn/subjects/get-subject-by-id';
import { GetSubjectById$Params } from '../fn/subjects/get-subject-by-id';
import { listAllSubjects } from '../fn/subjects/list-all-subjects';
import { ListAllSubjects$Params } from '../fn/subjects/list-all-subjects';
import { PageResponseSubjectResponse } from '../models/page-response-subject-response';
import { SubjectResponse } from '../models/subject-response';
import { updateSubject } from '../fn/subjects/update-subject';
import { UpdateSubject$Params } from '../fn/subjects/update-subject';

@Injectable({ providedIn: 'root' })
export class SubjectsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllSubjects()` */
  static readonly GetAllSubjectsPath = '/subjects';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllSubjects()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSubjects$Response(params?: GetAllSubjects$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<SubjectResponse>>> {
    return getAllSubjects(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllSubjects$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSubjects(params?: GetAllSubjects$Params, context?: HttpContext): Observable<Array<SubjectResponse>> {
    return this.getAllSubjects$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<SubjectResponse>>): Array<SubjectResponse> => r.body)
    );
  }

  /** Path part for operation `updateSubject()` */
  static readonly UpdateSubjectPath = '/subjects';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateSubject()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateSubject$Response(params: UpdateSubject$Params, context?: HttpContext): Observable<StrictHttpResponse<SubjectResponse>> {
    return updateSubject(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateSubject$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateSubject(params: UpdateSubject$Params, context?: HttpContext): Observable<SubjectResponse> {
    return this.updateSubject$Response(params, context).pipe(
      map((r: StrictHttpResponse<SubjectResponse>): SubjectResponse => r.body)
    );
  }

  /** Path part for operation `addSubject()` */
  static readonly AddSubjectPath = '/subjects';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addSubject()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addSubject$Response(params: AddSubject$Params, context?: HttpContext): Observable<StrictHttpResponse<SubjectResponse>> {
    return addSubject(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addSubject$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addSubject(params: AddSubject$Params, context?: HttpContext): Observable<SubjectResponse> {
    return this.addSubject$Response(params, context).pipe(
      map((r: StrictHttpResponse<SubjectResponse>): SubjectResponse => r.body)
    );
  }

  /** Path part for operation `getSubjectById()` */
  static readonly GetSubjectByIdPath = '/subjects/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSubjectById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSubjectById$Response(params: GetSubjectById$Params, context?: HttpContext): Observable<StrictHttpResponse<SubjectResponse>> {
    return getSubjectById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getSubjectById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSubjectById(params: GetSubjectById$Params, context?: HttpContext): Observable<SubjectResponse> {
    return this.getSubjectById$Response(params, context).pipe(
      map((r: StrictHttpResponse<SubjectResponse>): SubjectResponse => r.body)
    );
  }

  /** Path part for operation `deleteSubjectById()` */
  static readonly DeleteSubjectByIdPath = '/subjects/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteSubjectById()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSubjectById$Response(params: DeleteSubjectById$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteSubjectById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteSubjectById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSubjectById(params: DeleteSubjectById$Params, context?: HttpContext): Observable<void> {
    return this.deleteSubjectById$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `listAllSubjects()` */
  static readonly ListAllSubjectsPath = '/subjects/by-page';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listAllSubjects()` instead.
   *
   * This method doesn't expect any request body.
   */
  listAllSubjects$Response(params?: ListAllSubjects$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseSubjectResponse>> {
    return listAllSubjects(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listAllSubjects$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listAllSubjects(params?: ListAllSubjects$Params, context?: HttpContext): Observable<PageResponseSubjectResponse> {
    return this.listAllSubjects$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseSubjectResponse>): PageResponseSubjectResponse => r.body)
    );
  }

}
