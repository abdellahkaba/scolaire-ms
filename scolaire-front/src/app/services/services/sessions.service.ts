/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addSession } from '../fn/sessions/add-session';
import { AddSession$Params } from '../fn/sessions/add-session';
import { deleteSessionById } from '../fn/sessions/delete-session-by-id';
import { DeleteSessionById$Params } from '../fn/sessions/delete-session-by-id';
import { getAllSessions } from '../fn/sessions/get-all-sessions';
import { GetAllSessions$Params } from '../fn/sessions/get-all-sessions';
import { getSessionById } from '../fn/sessions/get-session-by-id';
import { GetSessionById$Params } from '../fn/sessions/get-session-by-id';
import { listAllSessions } from '../fn/sessions/list-all-sessions';
import { ListAllSessions$Params } from '../fn/sessions/list-all-sessions';
import { PageResponseSessionResponse } from '../models/page-response-session-response';
import { SessionResponse } from '../models/session-response';
import { updateSession } from '../fn/sessions/update-session';
import { UpdateSession$Params } from '../fn/sessions/update-session';

@Injectable({ providedIn: 'root' })
export class SessionsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllSessions()` */
  static readonly GetAllSessionsPath = '/sessions';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllSessions()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSessions$Response(params?: GetAllSessions$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<SessionResponse>>> {
    return getAllSessions(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllSessions$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSessions(params?: GetAllSessions$Params, context?: HttpContext): Observable<Array<SessionResponse>> {
    return this.getAllSessions$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<SessionResponse>>): Array<SessionResponse> => r.body)
    );
  }

  /** Path part for operation `updateSession()` */
  static readonly UpdateSessionPath = '/sessions';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateSession()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateSession$Response(params: UpdateSession$Params, context?: HttpContext): Observable<StrictHttpResponse<SessionResponse>> {
    return updateSession(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateSession$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateSession(params: UpdateSession$Params, context?: HttpContext): Observable<SessionResponse> {
    return this.updateSession$Response(params, context).pipe(
      map((r: StrictHttpResponse<SessionResponse>): SessionResponse => r.body)
    );
  }

  /** Path part for operation `addSession()` */
  static readonly AddSessionPath = '/sessions';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addSession()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addSession$Response(params: AddSession$Params, context?: HttpContext): Observable<StrictHttpResponse<SessionResponse>> {
    return addSession(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addSession$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addSession(params: AddSession$Params, context?: HttpContext): Observable<SessionResponse> {
    return this.addSession$Response(params, context).pipe(
      map((r: StrictHttpResponse<SessionResponse>): SessionResponse => r.body)
    );
  }

  /** Path part for operation `getSessionById()` */
  static readonly GetSessionByIdPath = '/sessions/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSessionById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSessionById$Response(params: GetSessionById$Params, context?: HttpContext): Observable<StrictHttpResponse<SessionResponse>> {
    return getSessionById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getSessionById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSessionById(params: GetSessionById$Params, context?: HttpContext): Observable<SessionResponse> {
    return this.getSessionById$Response(params, context).pipe(
      map((r: StrictHttpResponse<SessionResponse>): SessionResponse => r.body)
    );
  }

  /** Path part for operation `deleteSessionById()` */
  static readonly DeleteSessionByIdPath = '/sessions/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteSessionById()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSessionById$Response(params: DeleteSessionById$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteSessionById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteSessionById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSessionById(params: DeleteSessionById$Params, context?: HttpContext): Observable<void> {
    return this.deleteSessionById$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `listAllSessions()` */
  static readonly ListAllSessionsPath = '/sessions/by-page';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listAllSessions()` instead.
   *
   * This method doesn't expect any request body.
   */
  listAllSessions$Response(params?: ListAllSessions$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseSessionResponse>> {
    return listAllSessions(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listAllSessions$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listAllSessions(params?: ListAllSessions$Params, context?: HttpContext): Observable<PageResponseSessionResponse> {
    return this.listAllSessions$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseSessionResponse>): PageResponseSessionResponse => r.body)
    );
  }

}
