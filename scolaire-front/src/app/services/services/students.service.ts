/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addStudent } from '../fn/students/add-student';
import { AddStudent$Params } from '../fn/students/add-student';
import { deleteStudentById } from '../fn/students/delete-student-by-id';
import { DeleteStudentById$Params } from '../fn/students/delete-student-by-id';
import { getAllStudents } from '../fn/students/get-all-students';
import { GetAllStudents$Params } from '../fn/students/get-all-students';
import { getStudentById } from '../fn/students/get-student-by-id';
import { GetStudentById$Params } from '../fn/students/get-student-by-id';
import { listAllStudents } from '../fn/students/list-all-students';
import { ListAllStudents$Params } from '../fn/students/list-all-students';
import { PageResponseStudentResponse } from '../models/page-response-student-response';
import { StudentResponse } from '../models/student-response';
import { updateStudent } from '../fn/students/update-student';
import { UpdateStudent$Params } from '../fn/students/update-student';

@Injectable({ providedIn: 'root' })
export class StudentsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllStudents()` */
  static readonly GetAllStudentsPath = '/students';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllStudents()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllStudents$Response(params?: GetAllStudents$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<StudentResponse>>> {
    return getAllStudents(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllStudents$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllStudents(params?: GetAllStudents$Params, context?: HttpContext): Observable<Array<StudentResponse>> {
    return this.getAllStudents$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<StudentResponse>>): Array<StudentResponse> => r.body)
    );
  }

  /** Path part for operation `updateStudent()` */
  static readonly UpdateStudentPath = '/students';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateStudent()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateStudent$Response(params: UpdateStudent$Params, context?: HttpContext): Observable<StrictHttpResponse<StudentResponse>> {
    return updateStudent(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateStudent$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateStudent(params: UpdateStudent$Params, context?: HttpContext): Observable<StudentResponse> {
    return this.updateStudent$Response(params, context).pipe(
      map((r: StrictHttpResponse<StudentResponse>): StudentResponse => r.body)
    );
  }

  /** Path part for operation `addStudent()` */
  static readonly AddStudentPath = '/students';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addStudent()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addStudent$Response(params: AddStudent$Params, context?: HttpContext): Observable<StrictHttpResponse<StudentResponse>> {
    return addStudent(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addStudent$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addStudent(params: AddStudent$Params, context?: HttpContext): Observable<StudentResponse> {
    return this.addStudent$Response(params, context).pipe(
      map((r: StrictHttpResponse<StudentResponse>): StudentResponse => r.body)
    );
  }

  /** Path part for operation `getStudentById()` */
  static readonly GetStudentByIdPath = '/students/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getStudentById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getStudentById$Response(params: GetStudentById$Params, context?: HttpContext): Observable<StrictHttpResponse<StudentResponse>> {
    return getStudentById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getStudentById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getStudentById(params: GetStudentById$Params, context?: HttpContext): Observable<StudentResponse> {
    return this.getStudentById$Response(params, context).pipe(
      map((r: StrictHttpResponse<StudentResponse>): StudentResponse => r.body)
    );
  }

  /** Path part for operation `deleteStudentById()` */
  static readonly DeleteStudentByIdPath = '/students/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteStudentById()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteStudentById$Response(params: DeleteStudentById$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteStudentById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteStudentById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteStudentById(params: DeleteStudentById$Params, context?: HttpContext): Observable<void> {
    return this.deleteStudentById$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `listAllStudents()` */
  static readonly ListAllStudentsPath = '/students/by-page';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listAllStudents()` instead.
   *
   * This method doesn't expect any request body.
   */
  listAllStudents$Response(params?: ListAllStudents$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseStudentResponse>> {
    return listAllStudents(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listAllStudents$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listAllStudents(params?: ListAllStudents$Params, context?: HttpContext): Observable<PageResponseStudentResponse> {
    return this.listAllStudents$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseStudentResponse>): PageResponseStudentResponse => r.body)
    );
  }

}
