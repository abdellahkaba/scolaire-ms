/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addCourse } from '../fn/courses/add-course';
import { AddCourse$Params } from '../fn/courses/add-course';
import { CourseResponse } from '../models/course-response';
import { deleteCourseById } from '../fn/courses/delete-course-by-id';
import { DeleteCourseById$Params } from '../fn/courses/delete-course-by-id';
import { getAllCourses } from '../fn/courses/get-all-courses';
import { GetAllCourses$Params } from '../fn/courses/get-all-courses';
import { getCourseById } from '../fn/courses/get-course-by-id';
import { GetCourseById$Params } from '../fn/courses/get-course-by-id';
import { listAllCourses } from '../fn/courses/list-all-courses';
import { ListAllCourses$Params } from '../fn/courses/list-all-courses';
import { PageResponseCourseResponse } from '../models/page-response-course-response';
import { updateCourse } from '../fn/courses/update-course';
import { UpdateCourse$Params } from '../fn/courses/update-course';

@Injectable({ providedIn: 'root' })
export class CoursesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllCourses()` */
  static readonly GetAllCoursesPath = '/courses';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllCourses()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllCourses$Response(params?: GetAllCourses$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CourseResponse>>> {
    return getAllCourses(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllCourses$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllCourses(params?: GetAllCourses$Params, context?: HttpContext): Observable<Array<CourseResponse>> {
    return this.getAllCourses$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<CourseResponse>>): Array<CourseResponse> => r.body)
    );
  }

  /** Path part for operation `updateCourse()` */
  static readonly UpdateCoursePath = '/courses';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateCourse()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCourse$Response(params: UpdateCourse$Params, context?: HttpContext): Observable<StrictHttpResponse<CourseResponse>> {
    return updateCourse(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateCourse$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCourse(params: UpdateCourse$Params, context?: HttpContext): Observable<CourseResponse> {
    return this.updateCourse$Response(params, context).pipe(
      map((r: StrictHttpResponse<CourseResponse>): CourseResponse => r.body)
    );
  }

  /** Path part for operation `addCourse()` */
  static readonly AddCoursePath = '/courses';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addCourse()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addCourse$Response(params: AddCourse$Params, context?: HttpContext): Observable<StrictHttpResponse<CourseResponse>> {
    return addCourse(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addCourse$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addCourse(params: AddCourse$Params, context?: HttpContext): Observable<CourseResponse> {
    return this.addCourse$Response(params, context).pipe(
      map((r: StrictHttpResponse<CourseResponse>): CourseResponse => r.body)
    );
  }

  /** Path part for operation `getCourseById()` */
  static readonly GetCourseByIdPath = '/courses/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCourseById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCourseById$Response(params: GetCourseById$Params, context?: HttpContext): Observable<StrictHttpResponse<CourseResponse>> {
    return getCourseById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCourseById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCourseById(params: GetCourseById$Params, context?: HttpContext): Observable<CourseResponse> {
    return this.getCourseById$Response(params, context).pipe(
      map((r: StrictHttpResponse<CourseResponse>): CourseResponse => r.body)
    );
  }

  /** Path part for operation `deleteCourseById()` */
  static readonly DeleteCourseByIdPath = '/courses/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteCourseById()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCourseById$Response(params: DeleteCourseById$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteCourseById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteCourseById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCourseById(params: DeleteCourseById$Params, context?: HttpContext): Observable<void> {
    return this.deleteCourseById$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `listAllCourses()` */
  static readonly ListAllCoursesPath = '/courses/by-page';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listAllCourses()` instead.
   *
   * This method doesn't expect any request body.
   */
  listAllCourses$Response(params?: ListAllCourses$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseCourseResponse>> {
    return listAllCourses(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listAllCourses$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listAllCourses(params?: ListAllCourses$Params, context?: HttpContext): Observable<PageResponseCourseResponse> {
    return this.listAllCourses$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseCourseResponse>): PageResponseCourseResponse => r.body)
    );
  }

}
