/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addKind } from '../fn/sectors/add-kind';
import { AddKind$Params } from '../fn/sectors/add-kind';
import { deleteSectorById } from '../fn/sectors/delete-sector-by-id';
import { DeleteSectorById$Params } from '../fn/sectors/delete-sector-by-id';
import { getAllSectors } from '../fn/sectors/get-all-sectors';
import { GetAllSectors$Params } from '../fn/sectors/get-all-sectors';
import { getSectorById } from '../fn/sectors/get-sector-by-id';
import { GetSectorById$Params } from '../fn/sectors/get-sector-by-id';
import { listAllSectors } from '../fn/sectors/list-all-sectors';
import { ListAllSectors$Params } from '../fn/sectors/list-all-sectors';
import { PageResponseSectorResponse } from '../models/page-response-sector-response';
import { SectorResponse } from '../models/sector-response';
import { updateSector } from '../fn/sectors/update-sector';
import { UpdateSector$Params } from '../fn/sectors/update-sector';

@Injectable({ providedIn: 'root' })
export class SectorsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllSectors()` */
  static readonly GetAllSectorsPath = '/sectors';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllSectors()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSectors$Response(params?: GetAllSectors$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<SectorResponse>>> {
    return getAllSectors(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllSectors$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSectors(params?: GetAllSectors$Params, context?: HttpContext): Observable<Array<SectorResponse>> {
    return this.getAllSectors$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<SectorResponse>>): Array<SectorResponse> => r.body)
    );
  }

  /** Path part for operation `updateSector()` */
  static readonly UpdateSectorPath = '/sectors';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateSector()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateSector$Response(params: UpdateSector$Params, context?: HttpContext): Observable<StrictHttpResponse<SectorResponse>> {
    return updateSector(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateSector$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateSector(params: UpdateSector$Params, context?: HttpContext): Observable<SectorResponse> {
    return this.updateSector$Response(params, context).pipe(
      map((r: StrictHttpResponse<SectorResponse>): SectorResponse => r.body)
    );
  }

  /** Path part for operation `addKind()` */
  static readonly AddKindPath = '/sectors';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addKind()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addKind$Response(params: AddKind$Params, context?: HttpContext): Observable<StrictHttpResponse<SectorResponse>> {
    return addKind(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addKind$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addKind(params: AddKind$Params, context?: HttpContext): Observable<SectorResponse> {
    return this.addKind$Response(params, context).pipe(
      map((r: StrictHttpResponse<SectorResponse>): SectorResponse => r.body)
    );
  }

  /** Path part for operation `getSectorById()` */
  static readonly GetSectorByIdPath = '/sectors/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSectorById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSectorById$Response(params: GetSectorById$Params, context?: HttpContext): Observable<StrictHttpResponse<SectorResponse>> {
    return getSectorById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getSectorById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSectorById(params: GetSectorById$Params, context?: HttpContext): Observable<SectorResponse> {
    return this.getSectorById$Response(params, context).pipe(
      map((r: StrictHttpResponse<SectorResponse>): SectorResponse => r.body)
    );
  }

  /** Path part for operation `deleteSectorById()` */
  static readonly DeleteSectorByIdPath = '/sectors/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteSectorById()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSectorById$Response(params: DeleteSectorById$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteSectorById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteSectorById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSectorById(params: DeleteSectorById$Params, context?: HttpContext): Observable<void> {
    return this.deleteSectorById$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `listAllSectors()` */
  static readonly ListAllSectorsPath = '/sectors/by-page';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listAllSectors()` instead.
   *
   * This method doesn't expect any request body.
   */
  listAllSectors$Response(params?: ListAllSectors$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseSectorResponse>> {
    return listAllSectors(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listAllSectors$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listAllSectors(params?: ListAllSectors$Params, context?: HttpContext): Observable<PageResponseSectorResponse> {
    return this.listAllSectors$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseSectorResponse>): PageResponseSectorResponse => r.body)
    );
  }

}
