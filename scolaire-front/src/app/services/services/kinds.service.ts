/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addKind1 } from '../fn/kinds/add-kind-1';
import { AddKind1$Params } from '../fn/kinds/add-kind-1';
import { deleteKindById } from '../fn/kinds/delete-kind-by-id';
import { DeleteKindById$Params } from '../fn/kinds/delete-kind-by-id';
import { getAllKinds } from '../fn/kinds/get-all-kinds';
import { GetAllKinds$Params } from '../fn/kinds/get-all-kinds';
import { getKindById } from '../fn/kinds/get-kind-by-id';
import { GetKindById$Params } from '../fn/kinds/get-kind-by-id';
import { KindResponse } from '../models/kind-response';
import { listAllKinds } from '../fn/kinds/list-all-kinds';
import { ListAllKinds$Params } from '../fn/kinds/list-all-kinds';
import { PageResponseKindResponse } from '../models/page-response-kind-response';
import { updateKind } from '../fn/kinds/update-kind';
import { UpdateKind$Params } from '../fn/kinds/update-kind';

@Injectable({ providedIn: 'root' })
export class KindsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllKinds()` */
  static readonly GetAllKindsPath = '/kinds';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllKinds()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllKinds$Response(params?: GetAllKinds$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<KindResponse>>> {
    return getAllKinds(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllKinds$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllKinds(params?: GetAllKinds$Params, context?: HttpContext): Observable<Array<KindResponse>> {
    return this.getAllKinds$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<KindResponse>>): Array<KindResponse> => r.body)
    );
  }

  /** Path part for operation `updateKind()` */
  static readonly UpdateKindPath = '/kinds';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateKind()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateKind$Response(params: UpdateKind$Params, context?: HttpContext): Observable<StrictHttpResponse<KindResponse>> {
    return updateKind(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateKind$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateKind(params: UpdateKind$Params, context?: HttpContext): Observable<KindResponse> {
    return this.updateKind$Response(params, context).pipe(
      map((r: StrictHttpResponse<KindResponse>): KindResponse => r.body)
    );
  }

  /** Path part for operation `addKind1()` */
  static readonly AddKind1Path = '/kinds';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addKind1()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addKind1$Response(params: AddKind1$Params, context?: HttpContext): Observable<StrictHttpResponse<KindResponse>> {
    return addKind1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addKind1$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addKind1(params: AddKind1$Params, context?: HttpContext): Observable<KindResponse> {
    return this.addKind1$Response(params, context).pipe(
      map((r: StrictHttpResponse<KindResponse>): KindResponse => r.body)
    );
  }

  /** Path part for operation `getKindById()` */
  static readonly GetKindByIdPath = '/kinds/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getKindById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getKindById$Response(params: GetKindById$Params, context?: HttpContext): Observable<StrictHttpResponse<KindResponse>> {
    return getKindById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getKindById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getKindById(params: GetKindById$Params, context?: HttpContext): Observable<KindResponse> {
    return this.getKindById$Response(params, context).pipe(
      map((r: StrictHttpResponse<KindResponse>): KindResponse => r.body)
    );
  }

  /** Path part for operation `deleteKindById()` */
  static readonly DeleteKindByIdPath = '/kinds/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteKindById()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteKindById$Response(params: DeleteKindById$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteKindById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteKindById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteKindById(params: DeleteKindById$Params, context?: HttpContext): Observable<void> {
    return this.deleteKindById$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `listAllKinds()` */
  static readonly ListAllKindsPath = '/kinds/by-page';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listAllKinds()` instead.
   *
   * This method doesn't expect any request body.
   */
  listAllKinds$Response(params?: ListAllKinds$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseKindResponse>> {
    return listAllKinds(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listAllKinds$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listAllKinds(params?: ListAllKinds$Params, context?: HttpContext): Observable<PageResponseKindResponse> {
    return this.listAllKinds$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseKindResponse>): PageResponseKindResponse => r.body)
    );
  }

}
