/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteHalfYearlyById } from '../fn/half-yearly/delete-half-yearly-by-id';
import { DeleteHalfYearlyById$Params } from '../fn/half-yearly/delete-half-yearly-by-id';
import { getAllHalfYearly } from '../fn/half-yearly/get-all-half-yearly';
import { GetAllHalfYearly$Params } from '../fn/half-yearly/get-all-half-yearly';
import { getHalfYearlyById } from '../fn/half-yearly/get-half-yearly-by-id';
import { GetHalfYearlyById$Params } from '../fn/half-yearly/get-half-yearly-by-id';
import { HalfYearlyResponse } from '../models/half-yearly-response';
import { listAllHalfYearly } from '../fn/half-yearly/list-all-half-yearly';
import { ListAllHalfYearly$Params } from '../fn/half-yearly/list-all-half-yearly';
import { newHalfYearly } from '../fn/half-yearly/new-half-yearly';
import { NewHalfYearly$Params } from '../fn/half-yearly/new-half-yearly';
import { PageResponseHalfYearlyResponse } from '../models/page-response-half-yearly-response';
import { updateHalfYearly } from '../fn/half-yearly/update-half-yearly';
import { UpdateHalfYearly$Params } from '../fn/half-yearly/update-half-yearly';

@Injectable({ providedIn: 'root' })
export class HalfYearlyService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllHalfYearly()` */
  static readonly GetAllHalfYearlyPath = '/halfYearly';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllHalfYearly()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllHalfYearly$Response(params?: GetAllHalfYearly$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<HalfYearlyResponse>>> {
    return getAllHalfYearly(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllHalfYearly$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllHalfYearly(params?: GetAllHalfYearly$Params, context?: HttpContext): Observable<Array<HalfYearlyResponse>> {
    return this.getAllHalfYearly$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<HalfYearlyResponse>>): Array<HalfYearlyResponse> => r.body)
    );
  }

  /** Path part for operation `updateHalfYearly()` */
  static readonly UpdateHalfYearlyPath = '/halfYearly';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateHalfYearly()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateHalfYearly$Response(params: UpdateHalfYearly$Params, context?: HttpContext): Observable<StrictHttpResponse<HalfYearlyResponse>> {
    return updateHalfYearly(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateHalfYearly$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateHalfYearly(params: UpdateHalfYearly$Params, context?: HttpContext): Observable<HalfYearlyResponse> {
    return this.updateHalfYearly$Response(params, context).pipe(
      map((r: StrictHttpResponse<HalfYearlyResponse>): HalfYearlyResponse => r.body)
    );
  }

  /** Path part for operation `newHalfYearly()` */
  static readonly NewHalfYearlyPath = '/halfYearly';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `newHalfYearly()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  newHalfYearly$Response(params: NewHalfYearly$Params, context?: HttpContext): Observable<StrictHttpResponse<HalfYearlyResponse>> {
    return newHalfYearly(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `newHalfYearly$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  newHalfYearly(params: NewHalfYearly$Params, context?: HttpContext): Observable<HalfYearlyResponse> {
    return this.newHalfYearly$Response(params, context).pipe(
      map((r: StrictHttpResponse<HalfYearlyResponse>): HalfYearlyResponse => r.body)
    );
  }

  /** Path part for operation `getHalfYearlyById()` */
  static readonly GetHalfYearlyByIdPath = '/halfYearly/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getHalfYearlyById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getHalfYearlyById$Response(params: GetHalfYearlyById$Params, context?: HttpContext): Observable<StrictHttpResponse<HalfYearlyResponse>> {
    return getHalfYearlyById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getHalfYearlyById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getHalfYearlyById(params: GetHalfYearlyById$Params, context?: HttpContext): Observable<HalfYearlyResponse> {
    return this.getHalfYearlyById$Response(params, context).pipe(
      map((r: StrictHttpResponse<HalfYearlyResponse>): HalfYearlyResponse => r.body)
    );
  }

  /** Path part for operation `deleteHalfYearlyById()` */
  static readonly DeleteHalfYearlyByIdPath = '/halfYearly/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteHalfYearlyById()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteHalfYearlyById$Response(params: DeleteHalfYearlyById$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteHalfYearlyById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteHalfYearlyById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteHalfYearlyById(params: DeleteHalfYearlyById$Params, context?: HttpContext): Observable<void> {
    return this.deleteHalfYearlyById$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `listAllHalfYearly()` */
  static readonly ListAllHalfYearlyPath = '/halfYearly/by-page';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listAllHalfYearly()` instead.
   *
   * This method doesn't expect any request body.
   */
  listAllHalfYearly$Response(params?: ListAllHalfYearly$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseHalfYearlyResponse>> {
    return listAllHalfYearly(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listAllHalfYearly$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listAllHalfYearly(params?: ListAllHalfYearly$Params, context?: HttpContext): Observable<PageResponseHalfYearlyResponse> {
    return this.listAllHalfYearly$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseHalfYearlyResponse>): PageResponseHalfYearlyResponse => r.body)
    );
  }

}
